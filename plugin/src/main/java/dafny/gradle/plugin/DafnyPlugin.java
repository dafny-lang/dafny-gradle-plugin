/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dafny.gradle.plugin;

import org.gradle.api.Project;
import org.gradle.api.Plugin;
import org.gradle.api.file.DuplicatesStrategy;
import org.gradle.api.file.FileCollection;
import org.gradle.api.plugins.JavaPlugin;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.TaskProvider;
import org.gradle.language.jvm.tasks.ProcessResources;

import java.io.File;
import java.nio.file.Path;

public class DafnyPlugin implements Plugin<Project> {
    public void apply(Project project) {
        // Ensure that the Java plugin is applied.
        project.getPluginManager().apply(JavaPlugin.class);

        DafnyExtension extension =
                project.getExtensions().create("dafny", DafnyExtension.class);

        TaskProvider<DafnyVerifyTask> dafnyVerifyProvider = project.getTasks()
                .register("verifyDafny", DafnyVerifyTask.class);
        TaskProvider<DafnyTranslateTask> dafnyTranslateProvider = project.getTasks()
                .register("translateDafnyToJava", DafnyTranslateTask.class);

        // TODO: Configurable file collection for Dafny source files,
        // with doo file location as output
        FileCollection dafnySourceFiles = project.fileTree("src/main/dafny", t ->
                t.include("**/*.dfy").include("**/*.doo"));
        File dooFile = new File(project.getBuildDir(), "program.doo");

        dafnyVerifyProvider.configure(dafnyVerifyTask -> {
            System.out.println(dafnySourceFiles.getFiles());
            dafnyVerifyTask.getSourceFiles().from(dafnySourceFiles);
            dafnyVerifyTask.getClasspath().set(project.getConfigurations().getByName("compileClasspath"));
            dafnyVerifyTask.getOptions().set(extension.getOptions());
            dafnyVerifyTask.getOutputPath().set(dooFile);
        });
        dafnyTranslateProvider.configure(dafnyTranslateTask -> {
            dafnyTranslateTask.dependsOn(dafnyVerifyProvider);
            dafnyTranslateTask.getClasspath().set(project.getConfigurations().getByName("compileClasspath"));
        });

        ProcessResources task = project.getTasks().withType(ProcessResources.class).getByName("processResources");
        task.setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE);
        task.dependsOn(dafnyTranslateProvider);
    }
}
