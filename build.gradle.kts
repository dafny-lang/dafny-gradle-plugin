/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/custom_plugins.html
 */

plugins {
    // Apply the Plugin Publish plugin to make plugin publication possible
    // The Plugin Publish plugin will in turn auto-apply the Gradle Plugin Development Plugin (java-gradle-plugin)
    // and the Maven Publish plugin (maven-publish)
    id("com.gradle.plugin-publish") version "1.2.0"
    id("com.diffplug.spotless") version "7.0.1"

    `maven-publish`
}

group = "org.dafny"
version = "0.2.0"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("org.semver4j:semver4j:5.4.1")
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.1")
}

gradlePlugin {
    website.set("https://github.com/dafny-lang/dafny-gradle-plugin")
    vcsUrl.set("https://github.com/dafny-lang/dafny-gradle-plugin")

    // Define the plugin
    plugins {
        create("org.dafny.dafny") {
            id = "org.dafny.dafny"
            implementationClass = "org.dafny.gradle.plugin.DafnyPlugin"
            displayName = "Gradle plugin for Dafny"
            description = "This plugin offers tight integration of the " +
                "Dafny verification-aware programming language with Java: " +
                "automatically verifying Dafny source code and compiling it to Java source code, " +
                "which the Java plugin will then build together with any hand-written Java in the project. " +
                "It also provides a robust approach to distributing and managing Dafny dependencies " +
                "through Gradle-supported repositories such as Maven Central."
            tags.set(listOf("dafny", "verification", "building"))
        }
    }
}

spotless {
    java {
        googleJavaFormat()
    }
    kotlin {
        target("**/*.kts")
        ktlint()
    }
}

// Add a source set for the functional test suite
val functionalTestSourceSet =
    sourceSets.create("functionalTest") {
    }

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(functionalTestSourceSet)

tasks.named<Task>("check") {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
